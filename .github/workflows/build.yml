name: Rust
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
env:
  CARGO_TERM_COLOR: always
  SNAPEMU_DEVICE_VERSION: v1
  SNAPEMU_API_VERSION: v1
jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        target:
         - aarch64-unknown-linux-gnu 
         - aarch64-unknown-linux-musl 
         - x86_64-unknown-linux-gnu 
         - x86_64-unknown-linux-musl
         - x86_64-pc-windows-gnu
        os: [ ubuntu-24.04 ]
        include:
          - target: aarch64-apple-darwin
            os: macos-15
          - target: x86_64-apple-darwin
            os: macos-15
    runs-on: ${{matrix.os}}
    steps:
    - uses: actions/checkout@v4
    - name: Setup environments
      run: |
        rustup target add ${{matrix.target}}
        case "${{matrix.target}}" in
            aarch64-unknown-linux-gnu)
                sudo apt-get update
                sudo apt-get install gcc-aarch64-linux-gnu
                echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
                ;;
            aarch64-unknown-linux-musl)
                wget https://musl.cc/aarch64-linux-musl-cross.tgz
                tar xf aarch64-linux-musl-cross.tgz
                echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER=$PWD/aarch64-linux-musl-cross/bin/aarch64-linux-musl-gcc" >> $GITHUB_ENV
                ;;
            x86_64-unknown-linux-musl)
                sudo apt-get update
                sudo apt-get install musl-tools
                echo "CARGO_TARGET_X86_64_UNKNOWN_LINUX_MUSL_LINKER=musl-gcc" >> $GITHUB_ENV
                ;;
            x86_64-pc-windows-gnu)
                sudo apt-get update
                sudo apt-get install gcc-mingw-w64
                echo "CARGO_TARGET_X86_64_PC_WINDOWS_GNU_LINKER=x86_64-w64-mingw32-gcc" >> $GITHUB_ENV
                ;;
            *)
                ;;
        esac
    - name: Cache
      uses: Swatinem/rust-cache@v2.7.5
    - name: Build 
      run: cargo build  --target=${{matrix.target}} --release
    - name: Copy windows target 
      if: matrix.target == 'x86_64-pc-windows-gnu'
      run: | 
        mkdir -p snapemu_${{matrix.target}}/
        cp target/${{matrix.target}}/release/snap_api.exe snapemu_${{matrix.target}}/snap_api_${{matrix.target}}.exe
        cp target/${{matrix.target}}/release/devices_manager.exe snapemu_${{matrix.target}}/devices_manager_${{matrix.target}}.exe
    - name: Copy 
      if: matrix.target != 'x86_64-pc-windows-gnu'
      run: | 
        mkdir -p snapemu_${{matrix.target}}/
        cp target/${{matrix.target}}/release/snap_api snapemu_${{matrix.target}}/snap_api_${{matrix.target}}
        cp target/${{matrix.target}}/release/devices_manager snapemu_${{matrix.target}}/devices_manager_${{matrix.target}}
    - name: 'Tar files'
      run: tar -Jcf snapemu_${{matrix.target}}.tar.xz snapemu_${{matrix.target}}
    - uses: actions/upload-artifact@v4
      with:
        name: snapemu_${{matrix.target}}-artifact
        path: snapemu_${{matrix.target}}.tar.xz
  release:
    needs: build
    runs-on: ubuntu-24.04
    permissions:
      contents: write
      pull-requests: write
    steps:
    - id: drafter
      name: drafter
      uses: release-drafter/release-drafter@v5
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Download All Artifacts
      uses: actions/download-artifact@v4
      with:
        path: snapemu
        pattern: snapemu_*
        merge-multiple: true
    - name: Upload asset
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          UPLOAD_URL: ${{ steps.drafter.outputs.upload_url }}
      run: |
        for file in snapemu/*.tar.xz; do
        	basename="$(basename ${file})"
          URL="${UPLOAD_URL%\{?name,label\}}"?name=${basename}
          echo "Upload URL ${URL}"
        	curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${GITHUB_TOKEN}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            -H "Content-Type: application/octet-stream" \
            "$URL" \
            --data-binary "@${file}"
        done
        
