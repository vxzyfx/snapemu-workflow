//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.1

use sea_orm::entity::prelude::*;
use crate::db::Eui;
use crate::Id;
use crate::product::DeviceType;
use crate::time::Timestamp;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, serde::Serialize, serde::Deserialize)]
#[sea_orm(table_name = "snap_devices")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: Id,
    pub eui: Eui,
    #[sea_orm(column_type = "Text")]
    pub name: String,
    #[sea_orm(column_type = "Text")]
    pub description: String,
    pub creator: Id,
    pub enable: bool,
    pub online: bool,
    pub script: Option<Id>,
    pub data_id: Option<Id>,
    pub product_id: Option<Id>,
    #[sea_orm(column_type = "Text")]
    pub device_type: DeviceType,
    pub active_time: Option<Timestamp>,
    pub create_time: Timestamp,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_one = "super::snap_device_lora_gate::Entity")]
    LoRaGateway,
    #[sea_orm(has_one = "super::snap_device_lora_node::Entity")]
    LoRaNode,
    #[sea_orm(has_one = "super::snap_snap_device::Entity")]
    Snap,
    #[sea_orm(has_many = "super::snap_device_function::Entity")]
    Function,
    #[sea_orm(
        belongs_to = "super::snap_device_authority::Entity",
        from = "Column::Id",
        to = "super::snap_device_authority::Column::DeviceId"
    )]
    Auth
}

impl Related<super::snap_snap_device::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Snap.def()
    }
}
impl Related<super::snap_device_function::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Function.def()
    }
}

impl Related<super::snap_device_authority::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Auth.def()
    }
}

impl Related<super::snap_device_lora_gate::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::LoRaGateway.def()
    }
}

impl Related<super::snap_device_lora_node::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::LoRaNode.def()
    }
}

impl Related<super::snap_device_group::Entity> for Entity {
    fn to() -> RelationDef {
        super::snap_device_map_group::Relation::Group.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::snap_device_map_group::Relation::Device.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
