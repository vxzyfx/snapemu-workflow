//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.1

use sea_orm::entity::prelude::*;
use crate::Id;
use crate::time::Timestamp;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, serde::Serialize, serde::Deserialize)]
#[sea_orm(table_name = "snap_device_group")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: Id,
    #[sea_orm(column_type = "Text")]
    pub name: String,
    #[sea_orm(column_type = "Text")]
    pub description: String,
    pub default_group: bool,
    pub owner: Id,
    pub create_time: Timestamp,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::snap_device_map_group::Entity",
        from = "Column::Id",
        to = "super::snap_device_map_group::Column::GroupId"
    )]
    Map,
    #[sea_orm(
        belongs_to = "super::snap_users::Entity",
        from = "Column::Owner",
        to = "super::snap_users::Column::Id"
    )]
    User,
}

impl Related<super::snap_users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::User.def()
    }
}

impl Related<super::snap_device_map_group::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Map.def()
    }
}

impl Related<super::snap_devices::Entity> for Entity {
    fn to() -> RelationDef {
        super::snap_device_map_group::Relation::Device.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::snap_device_map_group::Relation::Group.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}

